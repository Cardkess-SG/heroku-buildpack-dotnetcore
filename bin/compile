#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
	
### Constants

### Configure directories
BASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies

# shellcheck source=util/common.sh
source "$BP_DIR/bin/util/common.sh"
# shellcheck source=util/install.sh
source "$BP_DIR/bin/util/install.sh"

print "The current stack version: ${STACK}"
PROJECT_VERSION="$(get_project_version $BUILD_DIR)"
print "The current project version: ${PROJECT_VERSION}"

if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
	NETCORE_VERSION="2.1.403"
elif [ $PROJECT_VERSION == "netcoreapp2.2" ]; then
	NETCORE_VERSION="2.2.402"
elif [ $PROJECT_VERSION == "netcoreapp3.0" ]; then
	NETCORE_VERSION="3.0.100"
else
	NETCORE_VERSION="2.2.401"
fi
print "The dotnet sdk version: ${NETCORE_VERSION} to be installed"

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

export_env_dir $ENV_DIR
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

print "Installing the dependencies"
if [ $STACK == "cedar-14" ] || [ $STACK == "heroku-14" ]; then
   	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu52
   	else
   		apt_install libunwind8 libicu52
   	fi
elif [ $STACK == "heroku-16" ]; then
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu55
   	else
   		apt_install libunwind8 libicu55
   	fi
else
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu60 openssl1.0
   	else
   		apt_install libunwind8 libicu60 openssl1.0
   	fi
fi

print "Installing dotnet"
install_dotnet $NETCORE_VERSION

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
dotnet --info

PROJECT_FILE="$(get_project_file $BUILD_DIR)"
PROJECT_NAME="$(get_project_name $BUILD_DIR)"
print "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output $BUILD_DIR/$PROJECT_NAME --configuration Release --runtime linux-x64

export APP_NAME=${PROJECT_NAME}
#echo "Remove project files in production machine"
find -maxdepth 1 ! -name .profile.d ! -name .apt ! -name .heroku ! -name node_modules ! -name $PROJECT_NAME  -exec rm -rv {} 2>/dev/null;

#cat << EOT >> ${BUILD_DIR}/Procfile
#web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll"
#EOT
