#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
	
### Constants

### Configure directories
BASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies

# shellcheck source=util/common.sh
source "$BP_DIR/bin/util/common.sh"
# shellcheck source=util/install.sh
source "$BP_DIR/bin/util/install.sh"
# shellcheck source=util/dotnet-install.sh
#source "$BP_DIR/bin/util/dotnet-install.sh"

print "The current stack version: ${STACK}"
PROJECT_VERSION="$(get_project_version $BUILD_DIR)"
print "The current project version: ${PROJECT_VERSION}"
NETCORE_VERSION="$(get_netcore_version $PROJECT_VERSION)"
print "The dotnet sdk version: ${NETCORE_VERSION} to be installed"
#print "OS: $(get_os)"
#print "CPU: $(get_cpu)"
#print "Platform: $(get_platform)"

# Skip TELEMETRY_OPTOUT on production environment
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

print "Installing prerequisites for .NET Core on Ubuntu"
if [ $STACK == "cedar-14" ] || [ $STACK == "heroku-14" ]; then
   	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu52
   	else
   		apt_install libunwind8 libicu52
   	fi
elif [ $STACK == "heroku-16" ]; then
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu55
   	else
   		apt_install libunwind8 libicu55
   	fi
else
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu60 openssl1.0
   	else
   		apt_install libunwind8 libicu60 openssl1.0
   	fi
fi

print "Installing dotnet"
$BP_DIR/bin/util/dotnet-install.sh --channel LTS --install-dir $HOME/.dotnet --version $NETCORE_VERSION
#install_dotnet $NETCORE_VERSION

# Add dotnet runtime path to environment variable that is available to access dotnet command
export PATH="/app/.dotnet:$PATH"

# Check dotnet version
dotnet --info

PROFILE_PATH="$BUILD_DIR/.profile.d/dotnetcore.sh"
mkdir -p $(dirname $PROFILE_PATH)

# Export vars
echo 'export PATH="$PATH:$HOME/.dotnet:$HOME/.apt/usr/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export LIBRARY_PATH="$LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export INCLUDE_PATH="$INCLUDE_PATH:$HOME/.apt/usr/include"' >> $PROFILE_PATH
echo 'export CPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo 'export CPPPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo 'export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:$HOME/.apt/usr/lib/pkgconfig"' >> $PROFILE_PATH

PROJECT_FILE="$(get_project_file $BUILD_DIR)"
PROJECT_NAME="$(get_project_name $BUILD_DIR)"
# https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore21
# dotnet publish [<PROJECT>]
dotnet publish $PROJECT_FILE --output $BUILD_DIR/$PROJECT_NAME --configuration Release --runtime linux-x64

# Remove src files in production machine
cd $BUILD_DIR
find -maxdepth 1 ! -name .profile.d ! -name .apt ! -name .dotnet ! -name node_modules ! -name $PROJECT_NAME  -exec rm -rv {} \; > /dev/null 2>&1;

# Create procfile and Add process type to that 
cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/$PROJECT_NAME && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./$PROJECT_NAME.dll"
EOT
